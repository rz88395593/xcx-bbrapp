/**
 * bjca
 * @author caolili
 */
function onloadAnysignView(t, n, a) { signObjTmp = t, signResCallback = n, isImage = !0, (context_view = a).setData({ hidden: !0 }), (context = wx.createCanvasContext("anysignCanvas")).setStrokeStyle(signObjTmp ? signObjTmp.penColor : "#000000"), context.setLineWidth(base_stroke_width), context.setLineCap("round"), context.setLineJoin("round"), wx.drawCanvas({ canvasId: "anysignCanvas", actions: context.getActions(), reserve: !0 }), wx.getSystemInfo({ success: function (t) { windowWidth = t.windowWidth, windowHeight = t.windowHeight } }), clear_canvas() } function canvasStart(t) { context.setStrokeStyle(signObjTmp ? signObjTmp.penColor : "#000000"), context.setLineWidth(base_stroke_width), context.setLineCap("round"), context.setLineJoin("round"), startX = t.changedTouches[0].x, startY = t.changedTouches[0].y, isDown = !0, points.push({ x: t.changedTouches[0].x, y: t.changedTouches[0].y }), points_all.push({ x: t.changedTouches[0].x, y: t.changedTouches[0].y }) } function canvasMove(t) { if (isDown && isImage) { var n = t.changedTouches[0].x, a = t.changedTouches[0].y, e = t.changedTouches[0].x, i = t.changedTouches[0].y; points.push({ x: t.changedTouches[0].x, y: t.changedTouches[0].y }), points_all.push({ x: t.changedTouches[0].x, y: t.changedTouches[0].y }), e > maxX && (maxX = e), e < minX && (minX = e), i > maxY && (maxY = i), i < minY && (minY = i); var s = t.timeStamp; 0 !== signTrachPointCount || isNaN(s) || (firstPointTime = s), isNaN(s) ? pointsStrack.push({ x: t.changedTouches[0].x, y: t.changedTouches[0].y, width: base_stroke_width, pointTime: 0 }) : pointsStrack.push({ x: t.changedTouches[0].x, y: t.changedTouches[0].y, width: base_stroke_width, pointTime: s - firstPointTime }), signTrachPointCount += 1, context.moveTo(startX, startY), context.lineTo(n, a), context.stroke(), startX = n, startY = a, context.draw(!0) } } function canvasEnd(t) { points = [], isDown = !1, pointsStrack.push({ x: t.changedTouches[0].x, y: t.changedTouches[0].y, width: -1, pointTime: -1 }), points_all.push({ x: 0, y: 0 }) } function clear_canvas() { console.log("clear"), isImage = !0, points = [], points_all = [], safeImage = "", signTrack = "", pointsStrack = [], signTrachPointCount = 0, calculatedSigWidth = 0, calculatedSigHeight = 0, minX = 9999, minY = 9999, maxX = 0, maxY = 0, context.clearRect(0, 0, context_view.data.canvasWidth, context_view.data.canvasHeight), context.draw(!0) } function sign_confirm() { if (0 == signTrachPointCount) return wx.showModal({ title: "提示", content: "签名内容不能为空！", showCancel: !1 }), !1; context_view.setData({ hidden: !1 }); var t = signObjTmp.singleWidth, n = signObjTmp.singleHeight, a = minX - 20, e = minY - 20, i = maxX - minX + 40, s = maxY - minY + 40; i > s ? (s = i * n / t) > context_view.data.canvasHeight && (s = context_view.data.canvasHeight) : i <= s && (i = t * s / n), wx.canvasToTempFilePath({ x: a, y: e, width: i, height: s, destWidth: i, destHeight: s, canvasId: "anysignCanvas", success: function (t) { safeImage = t.tempFilePath, isImage = !1, wx.uploadFile({ url: getApp().globalData.getImageURL, filePath: t.tempFilePath, name: "file", success: function (t) { if ("undefind" == t || null == t) wx.showModal({ title: "提示", content: "获取图片数据失败！" }), context_view.setData({ hidden: !0 }); else { var n = t.data; if (null == n) wx.showModal({ title: "提示", content: "获取图片数据失败！" }), context_view.setData({ hidden: !0 }); else if (isJSON(n)) { var a = JSON.parse(n); if (mCallBack) { for (var e = 0; e < pointsStrack.length; e++)signTrack += pointsStrack[e].x + "," + pointsStrack[e].y + "," + pointsStrack[e].width + "," + pointsStrack[e].pointTime + "\n"; mCallBack(signObjTmp.cid, "CALLBACK_TYPE_SIGNATURE", safeImage), signResCallback(a.memo, signTrack, signTrachPointCount, signObjTmp.singleWidth, signObjTmp.singleHeight) } context_view.setData({ showView: !1, hidden: !0 }), clear_canvas() } else wx.showModal({ title: "提示", content: "获取图片数据失败！" }), context_view.setData({ hidden: !0 }) } }, fail: function (t) { console.log(t.errMsg), isImage = !0, context_view.setData({ hidden: !0 }), wx.showModal({ title: "提示", content: "获取图片数据失败！" }) }, complete: function (t) { console.log(t.errMsg) } }) }, fail: function (t) { console.log(t.errMsg), isImage = !0, context_view.setData({ hidden: !0 }), wx.showModal({ title: "提示", content: "获取图片数据失败！" }) } }) } function sign_cancel() { clear_canvas(), context_view.setData({ showView: !1 }) } function setCallback(t) { mCallBack = t } function scollLeft() { for (var t = 0; t < 5; t++)canvasDraw(1) } function scollRight() { for (var t = 0; t < 5; t++)canvasDraw(-1) } function canvasDraw(t) { var n = t * movepadding, a = minX + n, e = maxX + n; if (a < 0 || a > context_view.data.canvasWidth || e < 0 || e > context_view.data.canvasWidth) context_view.setData({ canvasColor: !1 }), setTimeout(function () { context_view.setData({ canvasColor: !0 }) }, 100); else { context_view.setData({ canvasColor: !0 }); for (o = 0; o < points_all.length; o++)points_all[o].x += n; for (o = 0; o < pointsStrack.length; o++)pointsStrack[o].x += n; minX += n, maxX += n; var i, s; context.clearRect(0, 0, context_view.data.canvasWidth, context_view.data.canvasHeight); for (var o = 0; o < points_all.length; o++)0 == points_all[o].x || 0 == points_all[o].y || 0 == o ? (i = points_all[o].x, s = points_all[o].y) : 0 == i || 0 == s || (context.moveTo(i, s), context.lineTo(points_all[o].x, points_all[o].y), context.stroke()), i = points_all[o].x, s = points_all[o].y, context.draw(!0) } } function isJSON(t) { if ("string" == typeof t) try { return JSON.parse(t), !0 } catch (t) { return console.log("服务器返回数据不是JSON串！"), !1 } } var tools = require("../../utils/tools.js"), isDown = !1, context, signObjTmp, signResCallback, signTrack = "", signTrachPointCount = 0, firstPointTime = 0, calculatedSigWidth = 0, calculatedSigHeight = 0, windowHeight = 0, windowWidth = 0, base_stroke_width = 4, mCallBack, points = [], context_view, safeImage, startX, startY, isImage = !0, points_all = [], pointsStrack = [], minX = 0, minY = 0, maxX = 9999, maxY = 9999, movepadding = 10; module.exports = { onloadAnysignView: onloadAnysignView, canvasStart: canvasStart, canvasMove: canvasMove, canvasEnd: canvasEnd, clear_canvas: clear_canvas, sign_confirm: sign_confirm, sign_cancel: sign_cancel, setCallback: setCallback, scollLeft: scollLeft, scollRight: scollRight };